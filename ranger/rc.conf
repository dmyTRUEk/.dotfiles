# ===================================================================
# This file contains the default startup commands for ranger.
# To change them, it is recommended to create either /etc/ranger/rc.conf
# (system-wide) or ~/.config/ranger/rc.conf (per user) and add your custom
# commands there.
#
# If you copy this whole file there, you may want to set the environment
# variable RANGER_LOAD_DEFAULT_RC to FALSE to avoid loading it twice.
#
# The purpose of this file is mainly to define keybindings and settings.
# For running more complex python code, please create a plugin in "plugins/" or
# a command in "commands.py".
#
# Each line is a command that will be run before the user interface
# is initialized.  As a result, you can not use commands which rely
# on the UI such as :delete or :mark.
# ===================================================================



# ===================================================================
# == Options
# ===================================================================

# Which viewmode should be used?  Possible values are:
#     miller: Use miller columns which show multiple levels of the hierarchy
#     multipane: Midnight-commander like multipane view showing all tabs next to each other
set viewmode miller

# How many columns are there, and what are their relative widths?
set column_ratios 1,4,3

# Which files should be hidden? (regular expression)
set hidden_filter ^\.|\.(?:pyc|pyo|bak|swp)$|^lost\+found$|^__(py)?cache__$

# Show hidden files? You can toggle this by typing 'zh'
set show_hidden false

# Ask for a confirmation when running the "delete" command?
# Valid values are "always", "never", "multiple" (default)
# With "multiple", ranger will ask only if you delete multiple files at once.
set confirm_on_delete always

# Use non-default path for file preview script?
# ranger ships with scope.sh, a script that calls external programs (see
# README.md for dependencies) to preview images, archives, etc.
#set preview_script ~/.config/ranger/scope.sh

# Use the external preview script or display simple plain text or image previews?
set use_preview_script true

# Automatically count files in the directory, even before entering them?
set automatically_count_files true

# Open all images in this directory when running certain image viewers
# like feh or sxiv?  You can still open selected files by marking them.
set open_all_images true

# Be aware of version control systems and display information.
set vcs_aware false

# State of the four backends git, hg, bzr, svn. The possible states are
# disabled, local (only show local info), enabled (show local and remote
# information).
set vcs_backend_git enabled
set vcs_backend_hg  disabled
set vcs_backend_bzr disabled
set vcs_backend_svn disabled

# Truncate the long commit messages to this length when shown in the statusbar.
set vcs_msg_length 50

# Use one of the supported image preview protocols
set preview_images true

# Set the preview image method. Supported methods:
#
# * w3m (default):
#   Preview images in full color with the external command "w3mimgpreview"?
#   This requires the console web browser "w3m" and a supported terminal.
#   It has been successfully tested with "xterm" and "urxvt" without tmux.
#
# * iterm2:
#   Preview images in full color using iTerm2 image previews
#   (http://iterm2.com/images.html). This requires using iTerm2 compiled
#   with image preview support.
#
#   This feature relies on the dimensions of the terminal's font.  By default, a
#   width of 8 and height of 11 are used.  To use other values, set the options
#   iterm2_font_width and iterm2_font_height to the desired values.
#
# * terminology:
#   Previews images in full color in the terminology terminal emulator.
#   Supports a wide variety of formats, even vector graphics like svg.
#
# * urxvt:
#   Preview images in full color using urxvt image backgrounds. This
#   requires using urxvt compiled with pixbuf support.
#
# * urxvt-full:
#   The same as urxvt but utilizing not only the preview pane but the
#   whole terminal window.
#
# * kitty:
#   Preview images in full color using kitty image protocol.
#   Requires python PIL or pillow library.
#   If ranger does not share the local filesystem with kitty
#   the transfer method is changed to encode the whole image;
#   while slower, this allows remote previews,
#   for example during an ssh session.
#   Tmux is unsupported.
#
# * ueberzug:
#   Preview images in full color with the external command "ueberzug".
#   Images are shown by using a child window.
#   Only for users who run X11 in GNU/Linux.
set preview_images_method kitty

# Delay in seconds before displaying an image with the w3m method.
# Increase it in case of experiencing display corruption.
set w3m_delay 0.03

# Manually adjust the w3mimg offset when using a terminal which needs this
set w3m_offset 0

# Default iTerm2 font size (see: preview_images_method: iterm2)
set iterm2_font_width 8
set iterm2_font_height 11

# Use a unicode "..." character to mark cut-off filenames?
set unicode_ellipsis true

# BIDI support - try to properly display file names in RTL languages (Hebrew, Arabic).
# Requires the python-bidi pip package
set bidi_support false

# Show dotfiles in the bookmark preview box?
set show_hidden_bookmarks true

# Which colorscheme to use?  These colorschemes are available by default:
# default, jungle, snow, solarized
#set colorscheme default
set colorscheme ala_gruvbox

# Preview files on the rightmost column?
# And collapse (shrink) the last column if there is nothing to preview?
set preview_files true
set preview_directories true
set collapse_preview true

# Wrap long lines in plain text previews?
set wrap_plaintext_previews false

# Save the console history on exit?
set save_console_history true

# Draw the status bar on top of the browser window (default: bottom)
set status_bar_on_top false

# Draw a progress bar in the status bar which displays the average state of all
# currently running tasks which support progress bars?
set draw_progress_bar_in_status_bar true

# Draw borders around columns? (separators, outline, both, or none)
# Separators are vertical lines between columns.
# Outline draws a box around all the columns.
# Both combines the two.
set draw_borders none

# Display the directory name in tabs?
set dirname_in_tabs true

# TODO: even if only one tab opened, show it (like when 2+ tabs),
# look in newer ranger config, maybe this option now exists.

# Enable the mouse support?
set mouse_enabled true

# Display the file size in the main column or status bar?
set display_size_in_main_column true
set display_size_in_status_bar true

# Display the free disk space in the status bar?
set display_free_space_in_status_bar true

# Display files tags in all columns or only in main column?
set display_tags_in_all_columns true

# Set a title for the window? Updates both `WM_NAME` and `WM_ICON_NAME`
set update_title true

# Set the tmux/screen window-name to "ranger"?
set update_tmux_title true

# Shorten the title if it gets long?  The number defines how many
# directories are displayed at once, 0 turns off this feature.
set shorten_title 5

# Show hostname in titlebar?
set hostname_in_titlebar true

# Abbreviate $HOME with ~ in the titlebar (first line) of ranger?
set tilde_in_titlebar true

# How many directory-changes or console-commands should be kept in history?
set max_history_size 20
set max_console_history_size 50

# Try to keep so much space between the top/bottom border when scrolling:
set scroll_offset 8

# Flush the input after each key hit?  (Noticeable when ranger lags)
set flushinput true

# Padding on the right when there's no preview?
# This allows you to click into the space to run the file.
set padding_right true

# Save bookmarks (used with mX and `X) instantly?
# This helps to synchronize bookmarks between multiple ranger
# instances but leads to *slight* performance loss.
# When false, bookmarks are saved when ranger is exited.
set autosave_bookmarks true

# Save the "`" bookmark to disk.  This can be used to switch to the last
# directory by typing "``".
set save_backtick_bookmark true

# You can display the "real" cumulative size of directories by using the
# command :get_cumulative_size or typing "dc".  The size is expensive to
# calculate and will not be updated automatically.  You can choose
# to update it automatically though by turning on this option:
set autoupdate_cumulative_size false

# Turning this on makes sense for screen readers:
set show_cursor false

# One of: size, natural, basename, atime, ctime, mtime, type, random
set sort natural

# Additional sorting options
set sort_reverse false
set sort_case_insensitive true
set sort_directories_first true
set sort_unicode false

# Enable this if key combinations with the Alt Key don't work for you.
# (Especially on xterm)
set xterm_alt_key false

# Whether to include bookmarks in cd command
set cd_bookmarks true

# Changes case sensitivity for the cd command tab completion
set cd_tab_case sensitive

# Use fuzzy tab completion with the "cd" command. For example,
# ":cd /u/lo/b<tab>" expands to ":cd /usr/local/bin".
set cd_tab_fuzzy false

# Avoid previewing files larger than this size, in bytes.
# Use a value of 0 to disable this feature.
set preview_max_size 0

# The key hint lists up to this size have their sublists expanded.
# Otherwise the submaps are replaced with "...".
set hint_collapse_threshold 10

# Add the highlighted file to the path in the titlebar
set show_selection_in_titlebar true

# The delay that ranger idly waits for user input, in milliseconds, with a
# resolution of 100ms.  Lower delay reduces lag between directory updates but
# increases CPU load.
set idle_delay 2000

# When the metadata manager module looks for metadata, should it only look for
# a ".metadata.json" file in the current directory, or do a deep search and
# check all directories above the current one as well?
set metadata_deep_search false

# Clear all existing filters when leaving a directory
set clear_filters_on_dir_change false

# Disable displaying line numbers in main column.
# Possible values: false, absolute, relative.
set line_numbers relative

# When line_numbers=relative show the absolute line number in the
# current line.
set relative_current_zero false

# Start line numbers from 1 instead of 0
set one_indexed false

# Save tabs on exit
set save_tabs_on_exit true

# Enable scroll wrapping - moving down while on the last item will wrap around to
# the top and vice versa.
# wrap loop cycle repeat
set wrap_scroll true

# Set the global_inode_type_filter to nothing.  Possible options: d, f and l for
# directories, files and symlinks respectively.
set global_inode_type_filter

# This setting allows to freeze the list of files to save I/O bandwidth.  It
# should be 'false' during start-up, but you can toggle it by pressing F.
set freeze_files false

# Print file sizes in bytes instead of the default human-readable format.
set size_in_bytes false

# Warn at startup if RANGER_LEVEL env var is greater than 0, in other words
# give a warning when you nest ranger in a subshell started by ranger.
# Special value "error" makes the warning more visible.
set nested_ranger_warning true



# ===================================================================
# == Local Options
# ===================================================================
# You can set local options that only affect a single directory.

# Examples:
# setlocal path=~/downloads sort mtime

setlocal path="~/Pictures" sort mtime
setlocal path="~/Downloads/Telegram Desktop" sort mtime
# TODO: add linemode
#setlocal path="/var/cache/pacman/pkg" sort mtime



# ===================================================================
# == Command Aliases in the Console
# ===================================================================

#alias e     edit
#alias q     quit
#alias q!    quit!
#alias qa    quitall
#alias qa!   quitall!
#alias qall  quitall
#alias qall! quitall!
#alias setl  setlocal

#alias mark   scout -mr
#alias filter scout -prts
#alias hide   scout -prtsv
#alias unmark scout -Mr
#alias travel scout -aefklst

alias search scout -rst



# ===================================================================
# == Define keys for the browser
# ===================================================================

# TODO(crazy idea): allow comments at end of `map`
# TODO(crazy idea): (i forgot what) impl smt new in global params at begin

# Basic:
map h move left=1
map j move down=1
map k move up=1
map l move right=1
map gg move to=0
map G  move to=-1
#map <pagedown> move down=1   pages=True
#map <pageup>   move up=1     pages=True
# TODO:
# copymap l <CR>
# map <CR> move right=1

# TODO?: remove this line:
unmap quit
map Q quitall

# Move in history (prev / next):
alias history_prev history_go -1
alias history_next history_go 1
map H history_prev
map L history_next
map <C-o> history_prev
# TODO: fix it
# it dont work, because <C-i> is somehow binded to `tab_move 1`
map <C-i> history_next

map ] move_parent 1
map [ move_parent -1
map } traverse
map { traverse_backwards
# TODO:
# figure out what is this and what it does,
# and the decide what to do with it
map ) jump_non

# TODO:
# for all commands that requires input in command line
# (starts with `console` or contains `%space`):
# find same way to make like in vim, so that
# command it self is not erasable (quit it by esc)
# e.g. when you hold backspace too long or press it too much times

map <C-c> abort
map <esc> change_mode normal
map ? help
# TODO: better suggestions when press tab in console
map : console
map ! console shell%space
map S shell $SHELL
# TODO: fix in ~/.config/ranger/plugins/refresh.py
map r refresh_data_in_ui

# Move half page up/down
alias move_half_page_up   move   up=0.5 pages=True
alias move_half_page_down move down=0.5 pages=True
map <C-j> move_half_page_down
map <C-k> move_half_page_up

# Selecting(Marking) aliases:
alias select_toggle_one  mark_files toggle=True
alias select_toggle_all  mark_files all=True toggle=True
alias select_new         chain unselect_all; toggle_visual_mode
alias select_add         toggle_visual_mode
alias unselect_all       mark_files all=True val=False
# Selecting(Marking) binds(maps):
map <space>  select_toggle_one
map ~  select_toggle_all
map v  select_new
map V  select_add
# TODO: `uncut` bind
# TODO: `unselect_all` bind

# Create folder / directory:
alias create_folder  console mkdir%space
map o  create_folder

# Create file:
alias create_file  console touch%space
map O  create_file

# Goto:
# system:
map g/ cd /
map gh cd ~
# my folders:
map gb cd ~/Dropbox/GaussianBosonSampling
map gc cd ~/Code
map gd cd ~/Downloads
map gm cd ~/Music
map go cd ~/Documents
map gp cd ~/Pictures
map gr cd ~/Dropbox
map gs cd ~/Pictures/Screenshots
map gt cd ~/Downloads/Telegram Desktop
map gu cd ~/Dropbox/University/Mag2
map gv cd ~/Videos
map gw cd ~/Dropbox/Work
# game saves:
map gac cd ~/.local/share/Celeste/Saves
map ga3 cd ~/.local/share/Steam/steamapps/compatdata/374320/pfx/drive_c/users/steamuser/AppData/Roaming/DarkSoulsIII
map gae cd ~/.local/share/Steam/steamapps/compatdata/1245620/pfx/drive_c/users/steamuser/AppData/Roaming/EldenRing

#map gi eval fm.cd('/run/media/' + os.getenv('USER'))
#map gR eval fm.cd(ranger.RANGERDIR)
map g? cd /usr/share/doc/ranger

# TODO: better bind (`u`?, or just alias?)
# TODO?: bind `duai` to smt
map du shell -p (du --max-depth=1 --human-readable --apparent-size || du -d 1 -h) 2>/dev/null | sort -rh
map dc get_cumulative_size

# Copy files:
alias copy_to_os_copypaste_buffer shell filename=%p && wl-copy "file://$filename" --type text/uri-list
map yy copy
map yf copy_to_os_copypaste_buffer
map yp yank path
map yd yank dir
#map yn yank name
map yW yank name
map yE yank name
#map y. yank name_without_extension
map yw yank name_without_extension
map ye yank name_without_extension
map ya copy mode=add
map yr copy mode=remove
map yt copy mode=toggle
map ygg eval fm.copy(dirarg=dict(to=0), narg=quantifier)
map yG  eval fm.copy(dirarg=dict(to=-1), narg=quantifier)
map yj  eval fm.copy(dirarg=dict(down=1), narg=quantifier)
map yk  eval fm.copy(dirarg=dict(up=1), narg=quantifier)

# Filesystem Operations:
#map =  chmod

# Rename:
map cw console rename%space
map ce console rename%space
alias rename_insert eval fm.open_console('rename ' + fm.thisfile.relative_path.replace("%", "%%"), position=7)
alias rename_append_full eval fm.open_console('rename ' + fm.thisfile.relative_path.replace("%", "%%"))
map i  rename_insert
map I  rename_insert
map a  rename_append
map A  rename_append_full

# TODO: refactor this section:
# Paste:
map pp paste
map po paste overwrite=True
map pP paste append=True
map pO paste overwrite=True append=True
map pd console paste dest=
map pl paste_symlink relative=False
map pL paste_symlink relative=True
map phl paste_hardlink
map pht paste_hardlinked_subtree
map p`<any> paste dest=%any_path
map p'<any> paste dest=%any_path

# Delete:
map D console delete
map T console shell mv %s /home/${USER}/.trash/
map dd cut
#map ud uncut
map da cut mode=add
map dr cut mode=remove
map dt cut mode=toggle
map dgg eval fm.cut(dirarg=dict(to=0), narg=quantifier)
map dG  eval fm.cut(dirarg=dict(to=-1), narg=quantifier)
map dj  eval fm.cut(dirarg=dict(down=1), narg=quantifier)
map dk  eval fm.cut(dirarg=dict(up=1), narg=quantifier)
map d2j  eval fm.cut(dirarg=dict(down=2), narg=quantifier)
map d2k  eval fm.cut(dirarg=dict(up=2), narg=quantifier)
map d3j  eval fm.cut(dirarg=dict(down=3), narg=quantifier)
map d3k  eval fm.cut(dirarg=dict(up=3), narg=quantifier)

# Searching:
map f  console search%space
map /  console search%space
map n  search_next
map N  search_next forward=False
# TODO?: next items:
#map ct search_next order=tag
#map cs search_next order=size
#map ci search_next order=mimetype
#map cc search_next order=ctime
#map cm search_next order=mtime
#map ca search_next order=atime

# Tabs:
map t         tab_new
map x         tab_close
# TODO?: same but for <C-tab> (ctrl+tab) and <C-S-tab>
map <tab>     tab_move 1
map <S-tab>   tab_move -1
map J         tab_move -1
map K         tab_move 1
map <A-1>     tab_open 1
map <A-2>     tab_open 2
map <A-3>     tab_open 3
map <A-4>     tab_open 4
map <A-5>     tab_open 5
map <A-6>     tab_open 6
map <A-7>     tab_open 7
map <A-8>     tab_open 8
map <A-9>     tab_open 9
map >>        tab_shift 1
map <<        tab_shift -1

# Line mode:
map Mf linemode filename
map Mi linemode fileinfo
map Mm linemode mtime
copymap Mm Mt
map Mh linemode humanreadablemtime
map Mp linemode permissions
map Ms linemode sizemtime
map MH linemode sizehumanreadablemtime
#map Mt linemode metatitle

# Sorting:
# TODO: fix it: it gives error
#alias humanreadablesize filename
map sa chain set sort=atime;     set sort_reverse=False; linemode mtime;            echo sort is `atime`, but linemode is `mtime`
map sb chain set sort=basename;  set sort_reverse=False; linemode filename
map sc chain set sort=ctime;     set sort_reverse=False; linemode mtime;            echo sort is `ctime`, but linemode is `mtime`
map se chain set sort=extension; set sort_reverse=False; linemode filename
map sm chain set sort=mtime;     set sort_reverse=False; linemode mtime
map sn chain set sort=natural;   set sort_reverse=False; linemode filename
map sr set sort_reverse!
map ss chain set sort=size;      set sort_reverse=False; linemode filename
map st chain set sort=type;      set sort_reverse=False; linemode filename
map sz set sort=random

map sA chain set sort=atime;     set sort_reverse=True; linemode mtime;            echo sort is `atime`, but linemode is `mtime`
map sB chain set sort=basename;  set sort_reverse=True; linemode filename
map sC chain set sort=ctime;     set sort_reverse=True; linemode mtime;            echo sort is `ctime`, but linemode is `mtime`
map sE chain set sort=extension; set sort_reverse=True; linemode filename
map sM chain set sort=mtime;     set sort_reverse=True; linemode mtime
map sN chain set sort=natural;   set sort_reverse=True; linemode filename
map sS chain set sort=size;      set sort_reverse=True; linemode filename
map sT chain set sort=type;      set sort_reverse=True; linemode filename

# Settings:
map zh set show_hidden!
map zd set sort_directories_first!
map zi set preview_images!
map zv set use_preview_script!
map zs set sort_case_insensitive!
map zm set mouse_enabled!
map zp set preview_files!
map zP set preview_directories!
map zu set autoupdate_cumulative_size!
#map zf console filter%space
#copymap zf zz
#map zc set collapse_preview!
#map zI set flushinput!

# TODO: continue
# Filter stack
map .. filter_stack clear
map .d filter_stack add type d
map .f filter_stack add type f
map .l filter_stack add type l
map .m console filter_stack add mime%space
map .n console filter_stack add name%space
map .# console filter_stack add hash%space
map ." filter_stack add duplicate
map .' filter_stack add unique
map .| filter_stack add or
map .& filter_stack add and
map .! filter_stack add not
map .r filter_stack rotate
map .* filter_stack decompose
map .p filter_stack pop
map .s filter_stack show

# Bookmarks
map `<any>  enter_bookmark %any
map '<any>  enter_bookmark %any
map m<any>  set_bookmark %any
#map um<any> unset_bookmark %any

# TODO: figure out what this is needed for:
#map m<bg>  draw_bookmarks
#copymap m<bg>  um<bg> `<bg> '<bg> p`<bg> p'<bg>

# Generate all the chmod bindings with some python help:
#eval for arg in "rwxXst": cmd("map +u{0} shell -f chmod u+{0} %s".format(arg))
#eval for arg in "rwxXst": cmd("map +g{0} shell -f chmod g+{0} %s".format(arg))
#eval for arg in "rwxXst": cmd("map +o{0} shell -f chmod o+{0} %s".format(arg))
#eval for arg in "rwxXst": cmd("map +a{0} shell -f chmod a+{0} %s".format(arg))
#eval for arg in "rwxXst": cmd("map +{0}  shell -f chmod +{0} %s".format(arg))

#eval for arg in "rwxXst": cmd("map -u{0} shell -f chmod u-{0} %s".format(arg))
#eval for arg in "rwxXst": cmd("map -g{0} shell -f chmod g-{0} %s".format(arg))
#eval for arg in "rwxXst": cmd("map -o{0} shell -f chmod o-{0} %s".format(arg))
#eval for arg in "rwxXst": cmd("map -a{0} shell -f chmod a-{0} %s".format(arg))
#eval for arg in "rwxXst": cmd("map -{0}  shell -f chmod -{0} %s".format(arg))



# ===================================================================
# == Define keys for the console
# ===================================================================
# Note: Unmapped keys are passed directly to the console.

# Basic
cmap <tab>   eval fm.ui.console.tab()
cmap <S-tab> eval fm.ui.console.tab(-1)
cmap <esc>   eval fm.ui.console.close()
copycmap <esc> <C-c>
cmap <cr>    eval fm.ui.console.execute()
#cmap <C-l>   redraw_window

# Move around
cmap <up>    eval fm.ui.console.history_move(-1)
cmap <down>  eval fm.ui.console.history_move(1)
cmap <left>  eval fm.ui.console.move(left=1)
cmap <right> eval fm.ui.console.move(right=1)
copycmap <left>  <C-h>
copycmap <right> <C-l>

#cmap <home>  eval fm.ui.console.move(right=0, absolute=True)
#cmap <end>   eval fm.ui.console.move(right=-1, absolute=True)

cmap <A-b> eval fm.ui.console.move_word(left=1)
cmap <A-f> eval fm.ui.console.move_word(right=1)
copycmap <A-b> <A-left>
copycmap <A-f> <A-right>

# Line Editing
cmap <backspace>  eval fm.ui.console.delete(-1)
cmap <delete>     eval fm.ui.console.delete(0)
# TODO: same for <C-S-v> (ctrl+shift+v)
cmap <C-v>        eval fm.ui.console.paste()
#cmap <C-w>        eval fm.ui.console.delete_word()
#cmap <A-d>        eval fm.ui.console.delete_word(backward=False)
#cmap <C-k>        eval fm.ui.console.delete_rest(1)
#cmap <C-u>        eval fm.ui.console.delete_rest(-1)
#cmap <C-t>        eval fm.ui.console.transpose_chars()
#cmap <A-t>        eval fm.ui.console.transpose_words()

# Note: There are multiple ways to express backspaces.
# <backspace> (code 263) and <backspace2> (code 127).
# To be sure, use both.
copycmap <backspace> <backspace2>

# This special expression allows typing in numerals:
cmap <allow_quantifiers> false



# ===================================================================
# == Pager Keybindings
# ===================================================================

# Movement
#pmap <down>      pager_move  down=1
#pmap <up>        pager_move  up=1
#pmap <left>      pager_move  left=4
#pmap <right>     pager_move  right=4
#pmap <home>      pager_move  to=0
#pmap <end>       pager_move  to=-1
#pmap <pagedown>  pager_move  down=1.0  pages=True
#pmap <pageup>    pager_move  up=1.0    pages=True
#pmap <C-d>       pager_move  down=0.5  pages=True
#pmap <C-u>       pager_move  up=0.5    pages=True

#copypmap <up>       k  <C-p>
#copypmap <down>     j  <C-n>  <cr>
#copypmap <left>     h
#copypmap <right>    l
#copypmap <home>     g
#copypmap <end>      G
#copypmap <C-d>      d
#copypmap <C-u>      u
#copypmap <pagedown> n  f  <C-f>  <space>
#copypmap <pageup>   p  b  <C-b>

# Basic
#pmap <C-l> redraw_window
#pmap <esc> pager_close
#copypmap <esc> q Q i <f3>



# ===================================================================
# == Taskview Keybindings
# ===================================================================

# Movement
#tmap <up>        taskview_move up=1
#tmap <down>      taskview_move down=1
#tmap <home>      taskview_move to=0
#tmap <end>       taskview_move to=-1
#tmap <pagedown>  taskview_move down=1.0  pages=True
#tmap <pageup>    taskview_move up=1.0    pages=True
#tmap <C-d>       taskview_move down=0.5  pages=True
#tmap <C-u>       taskview_move up=0.5    pages=True

#copytmap <up>       k  <C-p>
#copytmap <down>     j  <C-n> <cr>
#copytmap <home>     g
#copytmap <end>      G
#copytmap <C-u>      u
#copytmap <pagedown> n  f  <C-f>  <space>
#copytmap <pageup>   p  b  <C-b>

# Changing priority and deleting tasks
#tmap J          eval -q fm.ui.taskview.task_move(-1)
#tmap K          eval -q fm.ui.taskview.task_move(0)
#tmap dd         eval -q fm.ui.taskview.task_remove()
#tmap <pagedown> eval -q fm.ui.taskview.task_move(-1)
#tmap <pageup>   eval -q fm.ui.taskview.task_move(0)
#tmap <delete>   eval -q fm.ui.taskview.task_remove()

# Basic
#tmap <C-l> redraw_window
#tmap <esc> taskview_close
#copytmap <esc> q Q w <C-c>

